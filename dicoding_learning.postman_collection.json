{
	"info": {
		"_postman_id": "e7080a63-6fb3-42e1-ab39-ab595250e585",
		"name": "Dicoding Learning",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20167994"
	},
	"item": [
		{
			"name": "notes-app",
			"item": [
				{
					"name": "Create Note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 201 value', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have the correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Catatan berhasil ditambahkan');\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have noteId property and not equal to empty', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"\r",
									"    pm.expect(data).to.ownProperty('noteId');\r",
									"    pm.expect(data.noteId).to.not.equals('');\r",
									"\r",
									"    pm.environment.set('noteId', data.noteId);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Catatan A\",\r\n    \"tags\": [\"Android\", \"Web\"],\r\n    \"body\": \"Isi dari catatan A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/notes",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Notes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type should be an application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have the correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.have.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"    pm.expect(responseJson).to.have.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('data on response body should have an array called notes that at least contain 1 item', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"\r",
									"    pm.expect(data).to.ownProperty('notes');\r",
									"    pm.expect(data.notes).to.be.an('array');\r",
									"    pm.expect(data.notes).lengthOf.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/notes",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Note by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response headers Content-Type should be an application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have the correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('data on response body should have note property that is an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"\r",
									"    pm.expect(data).to.ownProperty('note');\r",
									"    pm.expect(data.note).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('note object should have id, tags, body, and title with correct value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data: {note} } = responseJson;\r",
									"\r",
									"    const expectedId = pm.environment.get('noteId');\r",
									"    const expectedTitle = 'Catatan A';\r",
									"    const expectedTags = ['Android', 'Web'];\r",
									"    const expectedBody = 'Isi dari catatan A';\r",
									"\r",
									"    pm.expect(note).to.have.ownProperty('id');\r",
									"    pm.expect(note.id).to.equals(expectedId);\r",
									"\r",
									"    pm.expect(note).to.have.ownProperty('title');\r",
									"    pm.expect(note.title).to.equals(expectedTitle);\r",
									"\r",
									"    pm.expect(note).to.have.ownProperty('tags');\r",
									"    pm.expect(note.tags).to.eql(expectedTags);\r",
									"\r",
									"    pm.expect(note).to.have.ownProperty('body');\r",
									"    pm.expect(note.body).to.equals(expectedBody);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/notes/{{noteId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notes",
								"{{noteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Note by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response header Content-Type should be an application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have the correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.have.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.have.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Catatan berhasil diperbarui');\r",
									"});\r",
									"\r",
									"pm.test('the updated notes should has updated value', () => {\r",
									"    const noteId = pm.environment.get('noteId');\r",
									"    pm.sendRequest(`http://localhost:3000/notes/${noteId}`, (err, res) => {\r",
									"        if(!err){\r",
									"            pm.test('the updated notes should has updated value', () => {\r",
									"                const responseJson = res.json();\r",
									"                const { data: { note } } = responseJson;\r",
									"\r",
									"                const expectedTitle = 'Catatan A Revisi';\r",
									"                const expectedTags = ['Android', 'Web'];\r",
									"                const expectedBody = 'Isi catatan A yang sudah direvisi';\r",
									"\r",
									"                pm.expect(note.title).is.equals(expectedTitle);\r",
									"                pm.expect(note.tags).is.eql(expectedTags);\r",
									"                pm.expect(note.body).is.equals(expectedBody);\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Catatan A Revisi\",\r\n    \"tags\": [\"Android\", \"Web\"],\r\n    \"body\": \"Isi catatan A yang sudah direvisi\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/notes/{{noteId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notes",
								"{{noteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Note by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type headers should be an application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have the correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.have.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"\r",
									"    pm.expect(responseJson).to.have.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Catatan berhasil dihapus');\r",
									"});\r",
									"\r",
									"pm.test('when request to delete notes', () => {\r",
									"    const noteId = pm.environment.get('noteId');\r",
									"    pm.sendRequest(`http://localhost:3000/notes/${noteId}`, (err, res) => {\r",
									"        if(!err){\r",
									"            pm.test(`note should haven't found`, () => {\r",
									"                pm.expect(res.code).to.equals(404);\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:3000/notes/{{noteId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notes",
								"{{noteId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}